//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.28 at 12:39:51 PM IST 
//


package uk.co.ladbrokes.services.service.commonmessage._2;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for EntityNameKind.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="EntityNameKind"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="Class"/&gt;
 *     &lt;enumeration value="Type"/&gt;
 *     &lt;enumeration value="SubType"/&gt;
 *     &lt;enumeration value="Event"/&gt;
 *     &lt;enumeration value="Market"/&gt;
 *     &lt;enumeration value="Selection"/&gt;
 *     &lt;enumeration value="Coupon"/&gt;
 *     &lt;enumeration value="Customer"/&gt;
 *     &lt;enumeration value="Payment"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "EntityNameKind")
@XmlEnum
public enum EntityNameKind {

    @XmlEnumValue("Class")
    CLASS("Class"),
    @XmlEnumValue("Type")
    TYPE("Type"),
    @XmlEnumValue("SubType")
    SUB_TYPE("SubType"),
    @XmlEnumValue("Event")
    EVENT("Event"),
    @XmlEnumValue("Market")
    MARKET("Market"),
    @XmlEnumValue("Selection")
    SELECTION("Selection"),
    @XmlEnumValue("Coupon")
    COUPON("Coupon"),
    @XmlEnumValue("Customer")
    CUSTOMER("Customer"),
    @XmlEnumValue("Payment")
    PAYMENT("Payment");
    private final String value;

    EntityNameKind(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static EntityNameKind fromValue(String v) {
        for (EntityNameKind c: EntityNameKind.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
