//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.28 at 12:39:51 PM IST 
//


package uk.co.ladbrokes.cdm.betting.betslip._2;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for SelectionResultCodeKind.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="SelectionResultCodeKind"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="Win"/&gt;
 *     &lt;enumeration value="Lose"/&gt;
 *     &lt;enumeration value="Void"/&gt;
 *     &lt;enumeration value="Place"/&gt;
 *     &lt;enumeration value="Unset"/&gt;
 *     &lt;enumeration value="Handicap"/&gt;
 *     &lt;enumeration value="ResultedNotSettled"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "SelectionResultCodeKind")
@XmlEnum
public enum SelectionResultCodeKind {

    @XmlEnumValue("Win")
    WIN("Win"),
    @XmlEnumValue("Lose")
    LOSE("Lose"),
    @XmlEnumValue("Void")
    VOID("Void"),
    @XmlEnumValue("Place")
    PLACE("Place"),
    @XmlEnumValue("Unset")
    UNSET("Unset"),
    @XmlEnumValue("Handicap")
    HANDICAP("Handicap"),

    /**
     *  Resulted but not necessarily settled
     * 
     */
    @XmlEnumValue("ResultedNotSettled")
    RESULTED_NOT_SETTLED("ResultedNotSettled");
    private final String value;

    SelectionResultCodeKind(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static SelectionResultCodeKind fromValue(String v) {
        for (SelectionResultCodeKind c: SelectionResultCodeKind.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
