//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.28 at 12:39:51 PM IST 
//


package uk.co.ladbrokes.cdm.customer.customer._2;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for LimitTypeKind.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="LimitTypeKind"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="WithdrawalLimit"/&gt;
 *     &lt;enumeration value="TimeWindow"/&gt;
 *     &lt;enumeration value="DepositFrequency"/&gt;
 *     &lt;enumeration value="DepositLimit"/&gt;
 *     &lt;enumeration value="Other"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "LimitTypeKind")
@XmlEnum
public enum LimitTypeKind {


    /**
     * Withdrawal Limit Type
     * 
     */
    @XmlEnumValue("WithdrawalLimit")
    WITHDRAWAL_LIMIT("WithdrawalLimit"),

    /**
     * Time Window Type
     * 
     */
    @XmlEnumValue("TimeWindow")
    TIME_WINDOW("TimeWindow"),

    /**
     * Deposit Frequency Type
     * 
     */
    @XmlEnumValue("DepositFrequency")
    DEPOSIT_FREQUENCY("DepositFrequency"),

    /**
     * Deposit Limit Type
     * 
     */
    @XmlEnumValue("DepositLimit")
    DEPOSIT_LIMIT("DepositLimit"),

    /**
     * Other
     * 
     */
    @XmlEnumValue("Other")
    OTHER("Other");
    private final String value;

    LimitTypeKind(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static LimitTypeKind fromValue(String v) {
        for (LimitTypeKind c: LimitTypeKind.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
